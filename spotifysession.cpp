#include <QCoreApplication>
#include <sstream>
#include <stdexcept>
#include <string>
#include <spotify/api.h>
#include "spotifysession.hpp"
#include "appkey.h"

namespace {

std::string utf8_str(QString s) {
	QByteArray a = s.toUtf8();
	return std::string(a.data(), a.data() + a.size());
}

}

SpotifySession::SpotifySession(QObject* parent) :
	QObject(parent),
	session(0)
{
}

SpotifySession::SpotifySession(QObject* parent, QString username_, QString password_) :
	QObject(parent),
	username(username_),
	password(password_)
{
}

SpotifySession::~SpotifySession() { }

void SpotifySession::connect() {
	sp_error error;

	sp_session_config config;

	// Always do this. It allows libspotify to check for
	// header/library inconsistencies.
	config.api_version = SPOTIFY_API_VERSION;

	// The path of the directory to store the cache. This must be specified.
	// Please read the documentation on preferred values.
	config.cache_location = "tmp";

	// The path of the directory to store the settings. This must be specified.
	// Please read the documentation on preferred values.
	config.settings_location = "tmp";

	// The key of the application. They are generated by Spotify,
	// and are specific to each application using libspotify.
	config.application_key = g_appkey;
	config.application_key_size = g_appkey_size;

	// This identifies the application using some
	// free-text string [1, 255] characters.
	std::string appname = utf8_str(QCoreApplication::applicationName());
	config.user_agent = appname.c_str();

	// Register the callbacks.
	config.callbacks = 0; //&g_callbacks;

	error = sp_session_init(&config, &session);

	if (error != SP_ERROR_OK) {
		std::ostringstream ss;
		ss << "failed to create session: " << sp_error_message(error);
		throw std::runtime_error(ss.str());
	}

	// Login using the credentials given on the command line.
	error = sp_session_login(session, utf8_str(username).c_str(), utf8_str(password).c_str());

	if (error != SP_ERROR_OK) {
		std::ostringstream ss;
		ss << "failed to login: " << sp_error_message(error);
		throw std::runtime_error(ss.str());
	}
}

